#include <assert.h>
#include <string.h>
#include <stdio.h>
#include "..\..\..\..\..\include\lem\solarix\solarix_grammar_engine.h"
#include "..\..\..\..\..\include\lem\solarix\_sg_api.h"

extern void print8( const char *utf8 );
extern void failed( HGREN hEngine );

void TestModifications( HGREN hEngine )
{
/*
 int ekey_new0 = sol_AddWord8( hEngine, 
 "entry  ИМПЕДАНС  : существительное {  РОД:муж ОДУШ:НЕОДУШ  ПЕРЕЧИСЛИМОСТЬ:ДА    ПАДЕЖ:ИМ ЧИСЛО:ЕД {  ИМПЕДАНС  }  ПАДЕЖ:РОД ЧИСЛО:ЕД {  ИМПЕДАНСА  }  ПАДЕЖ:ТВОР ЧИСЛО:ЕД {  ИМПЕДАНСОМ  }  ПАДЕЖ:ВИН ЧИСЛО:ЕД {  ИМПЕДАНС  }  ПАДЕЖ:ДАТ ЧИСЛО:ЕД {  ИМПЕДАНСУ  }  ПАДЕЖ:ПРЕДЛ ЧИСЛО:ЕД {  ИМПЕДАНС  }  ПАДЕЖ:ИМ ЧИСЛО:МН {  ИМПЕДАНСЫ  }  ПАДЕЖ:РОД ЧИСЛО:МН {  ИМПЕДАНСОВ  }  ПАДЕЖ:ТВОР ЧИСЛО:МН {  ИМПЕДАНСАМИ  }  ПАДЕЖ:ВИН ЧИСЛО:МН {  ИМПЕДАНСЫ  }  ПАДЕЖ:ДАТ ЧИСЛО:МН {  ИМПЕДАНСАМ  }  ПАДЕЖ:ПРЕДЛ ЧИСЛО:МН {  ИМПЕДАНСЫ  }  }  "
  );
*/

 // Добавляем новую словарную статью. Обратите внимание, что текст описания статьи тут в utf-8,
 // поэтому вызываем sol_AddWord8. Для широких символов есть функция sol_AddWord.
 // http://www.solarix.ru/for_developers/api/morphology-analyzer-api.shtml#sol_AddWord
 int ekey_new = sol_AddWord8( hEngine,
 "entry хрюндель : СУЩЕСТВИТЕЛЬНОЕ "
 "{ "
 " РОД:МУЖ "
 " ОДУШ:ОДУШ "
 " ПЕРЕЧИСЛИМОСТЬ:ДА "
 " ПАДЕЖ:ИМ ЧИСЛО:ЕД { хрюндель } "
 " ПАДЕЖ:ИМ ЧИСЛО:МН { хрюндели } "
 " ПАДЕЖ:РОД ЧИСЛО:ЕД { хрюнделя } "
 " ПАДЕЖ:РОД ЧИСЛО:МН { хрюнделей } "
 " ПАДЕЖ:ТВОР ЧИСЛО:ЕД { хрюнделем } "
 " ПАДЕЖ:ТВОР ЧИСЛО:МН { хрюнделями } "
 " ПАДЕЖ:ВИН ЧИСЛО:ЕД { хрюнделя } "
 " ПАДЕЖ:ВИН ЧИСЛО:МН { хрюнделей } "
 " ПАДЕЖ:ДАТ ЧИСЛО:ЕД { хрюнделю } "
 " ПАДЕЖ:ДАТ ЧИСЛО:МН { хрюнделям } "
 " ПАДЕЖ:ПРЕДЛ ЧИСЛО:ЕД { хрюнделе } "
 " ПАДЕЖ:ПРЕДЛ ЧИСЛО:МН { хрюнделях } "
 "}"
  );

 if( ekey_new==-1 )
  {
   failed(hEngine);
   return;
  }
 

 // Найдем ее по имени и проверим, что первичные ключи совпадают.
 int ekey_test = sol_FindEntry8( hEngine, "хрюндель", -1, -1 );

 assert( ekey_new==ekey_test );

 // проверим еще поиск статьи по первичному ключу - затребуем имя добавленной статьи.
 char ename[80];
 sol_GetEntryName8( hEngine, ekey_new, ename );
 print8(ename);
 printf( "\n" );
 assert( strcmp( ename, "хрюндель" )==0 );

 // Следующий вызов API сохранит модифицированный лексикон на диск.
 //
 // http://www.solarix.ru/for_developers/api/grammar-engine-api.shtml#sol_SaveDictionary
 //
 // Если его раскомментировать, то используемый словарь будет изменен и
 // повторный запуск теста приведет к ошибке - переопределение статьи в sol_AddWord.

 // sol_SaveDictionary( hEngine, 0x00000002, L"" );

 return;
}